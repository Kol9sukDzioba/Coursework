import java.util.Arrays;

public class MyMatrix {

	private double[][] matrix;
	private int col;
	private int row;

	public MyMatrix(int m, int n) {
		super();
		row = m;
		col = n;
		matrix = new double[m][n];
		
	}

	public MyMatrix(double[][] matrix) {
		super();
		row = matrix.length;
		col = matrix[0].length;
		this.matrix = matrix;
	}
	
    //Друкуваня матриці
    public void print() {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
	
    //Транспортування матриці
    public void transport() {
        double[][] result = new double[col][row];
        for (int i = 0; i < matrix.length; ++i)
            for (int j = 0; j < matrix.length; ++j) {
                result[i][j] = matrix[j][i];
            }
        matrix = result;
    }
	
    //Множення матриці
    public void multiplicationMatrix(MyMatrix other) {
    	
        double[][] result = new double[0][0]; // <------------------
        for (int i = 0; i < row; i++)
            for (int j = 0; j < matrix[0].length; j++)
                for (int k = 0; k < col; k++) {
                    result[i][j] = matrix[i][k] * other[k][j];
                }
        matrix = result;
    }
	
    
    public boolean equals(MyMatrix other) {
    	return false;
    }

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + col;
		result = prime * result + Arrays.deepHashCode(matrix);
		result = prime * result + row;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MyMatrix other = (MyMatrix) obj;
		if (col != other.col || row != other.row)
			return false;
		if (!Arrays.deepEquals(matrix, other.matrix))
			return false;

		return true;
	}
	
