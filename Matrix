package edu.iful.oop;

public class Matrix {
    private int row, col;
    private Integer[][] matrix;
    private Integer[][] newMatrix;
    Vector vector = new Vector();

    public Matrix(int a, int b) {
        this.row = a;
        this.col = b;
        matrix = new Integer[a][b];
        MatrixRandomFill(this.row, this.col);
    }

    public Integer[][] getMatrix() {
        return matrix;
    }

    public void matrix(int z, int x) {
        this.newMatrix = new Integer[z][x];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                newMatrix[i][j] = matrix[i][j];
            }
        }
        for (int i = 0; i < z; i++) {
            for (int j = 0; j < x; j++) {
                if (newMatrix[i][j] == null) {
                    newMatrix[i][j] = (int) (Math.random() * 10);
                }
            }
        }
        this.matrix = newMatrix;
    }

    public void printMatrix(Integer[][] matrix) {

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public void MatrixRandomFill(Integer a, Integer b) {
        matrix = new Integer[a][b];
        for (int i = 0; i < a; i++) {
            for (int j = 0; j < b; j++) {
                matrix[i][j] = (int) (Math.random() * 10);
            }
        }
        printMatrix(matrix);
    }

    public void transportMatrix(Integer[][] matrix) {
        Integer[][] result = new Integer[col][row];
        for (int i = 0; i < matrix.length; ++i)
            for (int j = 0; j < matrix.length; ++j) {
                result[i][j] = matrix[j][i];
            }
        System.out.println("Транспортована матриця:");
            printMatrix(result);
    }

    public void doublerMatrix(Integer[][] matrix1, Integer[][] matrix2) {
        Integer[][] result = new Integer[matrix1.length][matrix2.length];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                result[i][j] = matrix1[i][j] + matrix2[i][j];
            }
        }
        System.out.println("Складена матриця: ");
        printMatrix(result);
    }

    public void substractionMatrix(Integer[][] matrix1, Integer[][] matrix2) {
        Integer[][] result = new Integer[matrix1.length][matrix2.length];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                result[i][j] = matrix1[i][j] - matrix2[i][j];
            }
        }
        System.out.println("Складання матриць: ");
        printMatrix(result);
    }

    public void multiplicationMatrix(Integer[][] matrix1, Integer[][] matrix2) {
        Integer[][] result = new Integer[matrix1.length][matrix2.length];
        for (int i = 0; i < row; i++)
            for (int j = 0; j < matrix[0].length; j++)
                for (int k = 0; k < col; k++) {
                    result[i][j] = matrix1[i][k] * matrix2[k][j];
                }
        System.out.println("Множення матриць: ");
        printMatrix(result);
    }

    public void matrixToVector(Integer[][] matrix, Integer[] vector) {

        if (col != vector.length) {
            System.out.println("Нерівні довжини");
        }

        Integer[] result = new Integer[row];
        Integer res = 0;

        System.out.println("Результат множення матриці на вектор: ");
        if (col == vector.length) {
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < vector.length; j++) {
                    res += matrix[i][j] * vector[j];
                }
                result[i] = res;
                res = 0;
            }
        }
        System.out.println("Множення матриці на вектор: ");
        this.vector.printVector(result);
    }

}
