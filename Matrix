package edu.iful.oop;

public class Matrix {
    private double[][] matrix;
    private int row;
    private int col;


    public void setValue(int row, int col, double value) {
        this.matrix[row][col] = value;
    }

    public Matrix(int m, int n) {
        row = m;
        col = n;
        matrix = new double[m][n];
        fill();
    }

    public Matrix(double[][] m) {
        super();
        row = m.length;
        col = m[0].length;
        matrix = m;
    }


    //Заповнення матриці
    public void fill() {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                matrix[i][j] = (int) (Math.random() * 20 - 8);
            }
        }
    }

    //Транспонування матриць
    public Matrix transposition() {
        Matrix result = new Matrix(matrix[0].length, matrix.length);
        double value;
        for (int i = 0; i < matrix[0].length; i++)
            for (int j = 0; j < matrix.length; j++) {
                value = matrix[j][i];
                result.setValue(i, j, value);
            }
        return result;
    }

    //Множення матриць
    public Matrix multiplication(Matrix other) {
        Matrix result = null;
        if (matrix[0].length == other.matrix.length) {
            result = new Matrix(matrix.length, matrix[0].length);
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < other.matrix[0].length; j++) {
                    double value = 0;
                    for (int k = 0; k < other.matrix.length; k++) {
                        value += matrix[i][k] * other.matrix[k][j];
                    }
                    result.setValue(i, j, value);
                }
            }
        }
        return result;
    }

    //Складання матриць
    public Matrix addition(Matrix other) {
        Matrix result = null;
        if (matrix.length == other.matrix.length && matrix[0].length == other.matrix[0].length) {
            result = new Matrix(matrix.length, matrix[0].length);
            double value;
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    value = matrix[i][j] + other.matrix[i][j];
                    result.setValue(i, j, value);
                }
            }
        }
        return result;
    }

    //Віднімання матриць
    public Matrix subtract(Matrix other) {
        Matrix result = null;
        if (matrix.length == other.matrix.length && matrix[0].length == other.matrix[0].length) {
            result = new Matrix(matrix.length,matrix[0].length);
            double value;
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    value = matrix[i][j] - other.matrix[i][j];
                    result.setValue(i,j,value);
                }
            }
        }
        return result;
    }

    //Множення матриці на вектор
    public Vector matrixToVector(Vector vector) {
        Vector result=null;
        if (matrix[0].length == vector.getArray().length) {
            result = new Vector(matrix.length);
            double value = 0;
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < vector.getArray().length; j++) {
                    value += matrix[i][j] * vector.getArray()[j];
                }
                result.setValue(i,value);
                value = 0;
            }
        }
        return result;
    }

    //Порівняння матриць
    public boolean compare(Matrix other) { //метод який порівнює матриці
        if (matrix == other.matrix) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (col != other.col || row != other.row) {
            return false;
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == other.matrix[i][j]) {
                    continue;
                } else {
                    return false;
                }
            }
        }
        return true;
    }

    //Пошук седлових точок
    public int[] saddle() {
        double minRow; //мінімальне число в рядку
        double maxCol; //максимальне число в стовбці
        for (int i = 0; i < row; i++) {
            minRow = matrix[i][0]; //задаю стартове значення числа в рядку(значення першого елемента в рядку)

            for (int j = 0; j < matrix[0].length; j++) { //знаходження мінімального числа в першому рядку
                if (matrix[i][j] <= minRow) { //якщо число менше за задане, то змінюємо його
                    minRow = matrix[i][j]; //заміняю число меншим
                }
            }

            int dubls = 1; //кількість одинакових чисел в рядку
            for (int j = 0; j < matrix[0].length; j++) {  //визначення кількості одинакових чисел в рядку
                if (matrix[i][j] == minRow) {
                    dubls++;
                }
            }

            int[] elements = new int[dubls];
            int index = 0; //індекс масиву з одинаковими числами
            for (int j = 0; j < matrix[0].length; j++) { //заповнюю числами масив індексів
                if (matrix[i][j] == minRow) {
                    elements[index] = j;
                    index++;
                }
            }
            for (int j = 0; j < elements.length; j++) { //перевіряє стовбці по всіх одинакових елементах в рядку
                maxCol = matrix[0][elements[j]]; //ініціалізую значення 1 елемента в стовбці
                for (int k = 0; k < matrix.length; k++) { //знаходження максимального числа в стовбці
                    if (matrix[k][elements[j]] >= maxCol) { //якщо елемент більший за задане спочатку значення змінюю його
                        maxCol = matrix[k][elements[j]]; //заміна стартового значення на більше
                    }
                }
                if (minRow >= maxCol) { //перевірка седлової точки
                    return new int[]{i,elements[j]};
                }
            }
        }
        return null;
    }

    //Обчислення норми матриці
    public double norm() {
        double norm = 0; //норма матриці
        for (int i = 0; i < row; i++) {
            double s = 0.0; //норма рядка матриці
            for (int j = 0; j < col; j++) {
                s += Math.abs(matrix[i][j]);
            }
            if (s > norm)
                norm = s;
        }
        return norm;
    }

    public double max() {
        double max = matrix[0][0];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] > max) {
                    max = matrix[i][j];
                }
            }
        }
        return max;
    }

    public double min() {
        double min = matrix[0][0];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] < min) {
                    min = matrix[i][j];
                }
            }
        }
        return min;
    }



    @Override
    public String toString() {
        String result ="\n"+"";
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                result += String.valueOf(matrix[i][j]) + " ";
            }
            result += "\n";
        }
        return result;
    }
}
